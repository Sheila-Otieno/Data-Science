/**Week one
Square roots Newtons Methods**/
/**absolute function**/
def abs(x: Double) = if (x < 0) -x else x

/**def sqrt(x: Double) ={
/**sqrtIter function checks if the guess is good enough and improves the guess**/

def sqrtIter(guess: Double, x: Double): Double=
    if(isGoodEnough(guess,x)) guess
    else sqrtIter(improve(guess,x),x)

/**isGoodEnough function checks if the guess is correct or not and checks it against a epsilon value**/

def isGoodEnough(guess: Double, x: Double)=
   /**abs(guess * guess - x) < 0.001**/
   abs(guess * guess - x) / x < 0.001

/**improve function improves the guess until it reaches closer to the guessed function**/

def improve(guess: Double, x: Double)=
   (guess + x / guess) / 2

  sqrtIter(1.0, x)
}**/
//def sqrt(x: Double) = sqrtIter(1.0, x)

//Another version of the function
def sqrt(x: Double) = {

  /**sqrtIter function checks if the guess is good enough and improves the guess**/
  def sqrtIter(guess: Double): Double =
    if (isGoodEnough(guess)) guess
    else sqrtIter(improve(guess))

  /**isGoodEnough function checks if the guess is correct or not and checks it against a epsilon value**/
  def isGoodEnough(guess: Double) =
    /**abs(guess * guess - x) < 0.001**/
    abs(guess * guess - x) / x < 0.001

  /**improve function improves the guess until it reaches closer to the guessed function**/
  def improve(guess: Double) =
    (guess + x / guess) / 2

  sqrtIter(1.0)
}

//Higher order functions
def sum(f: Int => Int, a: Int, b: Int): Int =
  if (a > b) 0
  else f(a) + sum(f, a + 1, b)

def sumInts(a: Int, b: Int) = sum(id, a, b)
def sumCubes(a: Int, b: Int) = sum(cube, a, b)
def sumFactorials(a: Int, b: Int) = sum(fact, a, b)

def id(x: Int) = x
def cube(x: Int) = x * x * x
def fact(x: Int): Int = if (x == 0) 1 else fact(x - 1)

//Anonymous functions
def sumInts2(a: Int, b: Int) = sum(x => x, a, b)
def sumCubes2(a: Int, b: Int) = sum(x => x * x * x, a, b)

//tail recursive function of sum function
def sum2(f: Int => Int, a: Int, b: Int) = {
  def loop(a: Int, acc: Int): Int =
    if (a > b) acc
    else loop(a + 1, f(a) + acc)
  loop(a, 0)
}

//currying
def product(f: Int => Int)(a: Int, b: Int): Int =
  if (a > b) 1
  else f(a) * product(f)(a + 1, b)

product(x => x * x)(3, 4)

def fact_prod(n: Int) = product(x => x)(1, n)
fact_prod(5)

def mapReduce(f: Int => Int, combine: (Int, Int) => Int, zero: Int)(
    a: Int,
    b: Int
): Int =
  if (a > b) zero
  else combine(f(a), mapReduce(f, combine, zero)(a + 1, b))

//define product as mapReduce
def prod_map(f: Int => Int)(a: Int, b: Int): Int =
  mapReduce(f, (x, y) => x * y, 1)(a, b)
prod_map(x => x * x)(3, 4)

sum2(x => x * x, 1, 7)
sum2(x => x, 4, 9)

//sqrt(2)
//sqrt(1.0e20)
//sqrt(0.1e-20)
//sqrt(0.001)
//sqrt(0.1e-50)
sumInts(1, 9)
sumCubes(1, 9)
sumFactorials(1, 9)
sumInts2(4, 8)
sumCubes2(4, 8)

/**Fixed point function**/
import math.abs
val tolerance = 0.0001
def isCloseEnough(x: Double, y: Double) =
  abs((x - y) / x) / x < tolerance

def fixedPoint(f: Double => Double)(firstGuess: Double) = {
  def iterate(guess: Double): Double = {
    //print("guess: "+ guess)
    val next = f(guess)
    if (isCloseEnough(guess, next)) next
    else iterate(next)
  }
  iterate(firstGuess)
}
//call the fixed point function
fixedPoint(x => 1 + x / 2)(1)
//sqrt function with fixed point
def sqrtf(x: Double) = fixedPoint(y => (y + x / y) / 2)(1)
sqrtf(2)

//averageDamp function to help the fixedPoint function converge when used with sqrt function
def averageDamp(f: Double => Double)(x: Double) = (x + f(x)) / 2
//sqrt function
def sqrtg(x: Double) =
  fixedPoint(averageDamp(y => x / y))(1)

sqrtg(2)
sqrtg(3)

//Week three
//Fucntions and Data
object rationals{
  val x = new Rational(1,2)
  x.numer
  x.denom
  
  val y = new Rational(2,3)
  x.add(y)
  
  val w = new Rational(1,3)
  val v = new Rational(5,7)
  val z = new Rational(3,2)
  w.sub(v).sub(z)
  x.less(y)
  x.max(y)
  //calling rational class using the new constructor
  new Rational(2)
}
class Rational(x: Int, y:Int){
  //checks if the denominator is zero and gives an error message when y=0
  require(y !=0, "denominator must be non-zero")
  
  /**Second constructor of the class
  'this' is used as a function definition while calling the constructor
  **/
  def this(x: Int) = this(x,1)
  /**Modify rational class so that the values are simplified at the end and printed as strings**/
  private  def gcd(a: Int,b: Int): Int = if(b==0) a else gcd(b, a%b)
  //private val g= gcd(x,y)
  //def numer = x/g
  //def denom = y/g
  def numer = x
  def denom = y
  
  def less(that: Rational) = numer * that.denom < that.numer * denom
  
  def max(that: Rational) = if(this.less(that)) that else this
  
  def add(that: Rational) = 
    new Rational(
      numer * that.denom + that.numer * denom,
      denom * that.denom)
  
  //override def toString = numer + "/" + denom
  override def toString = {
    val g= gcd(numer,denom)
    s"$numer/g + / + $denom/g"
  }
  
  //neg method
  def neg : Rational = new Rational(-numer, denom)
  //subtract method
  def sub(that: Rational) = add(that.neg)
}

/**Tail recursion**/
def factorial_num(n: Int): Int={
  def loop(acc: Int, n: Int): Int =
     if(n == 0) acc
     else loop(acc * n, n-1)
  loop(1,n)
}
factorial_num(6)

def balance(chars: List[Char]): Boolean = {
    def balanced(chars: List[Char], open: Int): Boolean = 
      if (chars.isEmpty) open == 0
      else if (chars.head == '(') balanced(chars.tail,open+1)
      else if (chars.head == ')') open>0 && balanced(chars.tail,open-1)
      else balanced(chars.tail,open)
    balanced(chars,0)
}

balance("(just an) example".toList)

import scala.collection.mutable.ListBuffer


def countChange(money: Int, coins: List[Int]): Int = {
    def f(lastMaxCoin_total_coll: List[(Int, Int)], count: Int): Int = {
      if (lastMaxCoin_total_coll.isEmpty) {
        count
      } else {
        val b = ListBuffer[(Int, Int)]()
        var newCount = count
        for ((lastMaxCoin, total) <- lastMaxCoin_total_coll) {
          if (total < money) {
            for (c <- coins) {
              if (c >= lastMaxCoin) {
                val e = (c, total + c)
                b += e
              }
            }
          } else if (total == money) {
            newCount += 1
          }
        }

        f(b.toList, newCount)
      }
    }

    val b = coins.map { c => (c, c) }
    f(b, 0)
  }


val change = List(1,2)
countChange(4, change)

def isPrime(n: Int) = (2 until n) forall (n % _ !=0)
val n=7
for{
  i <- 1 until n
  j <- 1 until i
  if isPrime(i + j)
}yield(i,j)

def scalarProduct(xs: List[Double], ys: List[Double]): Double=
   (for((x,y) <- xs zip ys)yield x*y).sum
val list_a = List(7.8,9.9,7.7,3.4)
val list_b = List(2.5,6.5,1.9,8.2)
scalarProduct(list_a,list_b)

type Row5=List[Int]
type Matrix5=List[Row5]
val u: Matrix5 = List(1 :: 2 :: 3 :: Nil, 4 :: 5 :: 6 :: Nil)
val q: Matrix5 = List(7 :: 8 :: Nil, 9 :: 10 :: Nil, 11 :: 12 :: Nil)

 def transpose[A](list1:List[List[A]]):List[List[A]]={
    for(i<-List.range(0,list1(0).length))yield
      (for(ys<-list1)yield ys(i))
  }
def dotProduct(l :List[Int],m: List[Int]): Int={
    if(l.isEmpty && m.isEmpty)0
    else l.head*m.head+dotProduct(l.tail,m.tail)
  }

  /*The matrixMultiply takes two lists*/
  /*The first for loop flattens the first list xs*/
  /*The second loop flattens the second list after it is transposed
  * then yields the product using the dotProduct function*/
  def matrixMultiply(list1: List[List[Int]],list2: List[List[Int]]):List[List[Int]]={
    //For matrix multiplication one matrix must be transposed
    //The val transposedList stores the transposed ys list
    val transposedList=transpose(list2)
    for(xs<-list1)yield
      for(y<-transposedList)yield
        dotProduct(xs,y)
  }
val ab: Matrix5 = matrixMultiply(u, q)
//ab.map(_.mkString(" ")).foreach(println)
matrixMultiply(List(List(1, 0, 6), List(5, 7, 4), List(6, 0, 7)), List(List(2, 5, 5), List(3, 7, 3), List(4, 7, 8)))

val sumt= transpose(u)
sumt
def map2(l: List[Int], f: Int => Int): List[Int] = l match {
		case Nil => Nil
		case h :: t => f(h) :: map2(t, f)	
}
def summ1(l: List[Int]): Int = {
		if (l == Nil)
			0
		else 
			l.head + summ1(l.tail)
}
def zip(l1: List[Int], l2: List[Int]): List[(Int, Int)] = {
		if ((l1 == Nil) || (l2 == Nil))
			Nil
		else
			(l1.head, l2.head) :: zip(l1.tail, l2.tail)
	}

val a1 = List(3, 7, 2, 9)
val b1 = List(1, 8, 4, 6)
val p= zip(a1,b1)

def map[S,T] ( f:(S) => T, l:List[S] ): List[T] =
  l match {
    case Nil => Nil
    case x :: t => f(x) :: map(f, t)
  }


val addTogether = (p:(Int,Int)) => {
  val (x, y) = p
  x + y
}
val subTogether =(p:(Int,Int))=>{
  val (x, y) = p
  x - y
}
val divideTogether=(p:(Int,Int))=>{
  val (x, y) = p
  x / y
}
val multiplyTogether=(p:(Int,Int))=>{
  val (x, y) = p
  x * y
}
val listAddTogether = map(addTogether, _:List[(Int, Int)])
val listSubTogether = map(subTogether, _:List[(Int,Int)])
val listDivideTogether = map(divideTogether, _:List[(Int,Int)])
val listmultiplyTogether = map(multiplyTogether, _:List[(Int,Int)])
listAddTogether( p )
listSubTogether(p)
listDivideTogether(p)
listmultiplyTogether(p)
map((x:Int) => x + 4, a1)
map((x:Int) => x - 4, a1)
map((x:Int) => x / 4, a1)
map((x:Int) => x * 4, a1)

def sumVec(list: List[Int], list2: List[List[Int]])={
  for(xs<-list2)yield{
    val y=zip(list, xs)
    listAddTogether( y )
  }
}
sumVec(a1,u)
def subVec(list: List[Int], list2: List[List[Int]])={
  for(xs<-list2)yield{
    val y=zip(list, xs)
    listSubTogether( y )
  }
}
subVec(a1,u)
def divVec(list: List[Int], list2: List[List[Int]])={
  for(xs<-list2)yield{
    val y=zip(list, xs)
    listDivideTogether( y )
  }
}
divVec(a1,u)
def multVec(list: List[Int], list2: List[List[Int]])={
  for(xs<-list2)yield{
    val y=zip(list, xs)
    listmultiplyTogether( y )
  }
}
multVec(a1,u)


def sumMatrix(list1: List[List[Int]], list2: List[List[Int]])={
  for(xs<-list1;ys<-list2)yield{
      //val cd =zip(xs,ys)
      map(addTogether, zip(xs,ys))
   
  }
}
def subMatrix(list1: List[List[Int]], list2: List[List[Int]])={
  for(xs<-list1)yield{
   for(ys<-list2)yield{
      val cd =zip(xs,ys)
      listSubTogether( cd )
   }
  }
}
def divideMatrix(list1: List[List[Int]], list2: List[List[Int]])={
  for(xs<-list1)yield{
   for(ys<-list2)yield{
      val cd =zip(xs,ys)
      listDivideTogether( cd )
   }
    
  }
  
}
def numAddMatrix(n: Int,list1: List[List[Int]] )={
  for(xs<-list1)yield
   map((x:Int) => x + n, xs)
}
def numSubMatrix(n: Int,list1: List[List[Int]])={
  for(xs<-list1)yield
   map((x:Int) => x - n, xs)
}
def numDivMatrix(n: Int,list1: List[List[Int]])={
  for(xs<-list1)yield
   map((x:Int) => x / n, xs)
}
def numMultMatrix(n: Int,list1: List[List[Int]])={
  for(xs<-list1)yield
   map((x:Int) => x * n, xs)
}




sumMatrix(u,q)
val k: Matrix5 = List(1 :: 2 :: 3 :: Nil, 4 :: 5 :: 6 :: Nil)
val p1: Matrix5 = List(7 :: 8 :: 6 :: Nil, 9 :: 10 :: 1::Nil, 11 :: 12 :: 6:: Nil)
sumMatrix(k,p1)
val m3: Matrix5 = List(List(1, 1), List(2, 2))
val m4: Matrix5= List(List(2, 2), List(3, 3))
sumMatrix(m3,m4)
subMatrix(m3,m4)
divideMatrix(m3,m4)
numAddMatrix(3,m3)
numSubMatrix(3,m3)
numDivMatrix(3,m3)
numMultMatrix(3,m3)
val sums = (x: Int, y: Int) => x + y

def take(r: List[Double], i: Int): Double = {
      if (i == 0) r.head
      else take(r.tail, i - 1)
}
take( list_a,3)
val t = 0 to 2
t
def range_apply(r: List[Double])={
  def apply(range: Range) = {
    //val data_index = List(range)
    //r.map(j=>data_index(j))
    for(xs<-range)yield
       take(r,xs)
  }
  apply(t)
}
range_apply(list_a)
//val list_a = List(7.8,9.9,7.7,3.4)
//val list_b = List(2.5,6.5,1.9,8.2)


//val m4: Matrix5= List(List(2, 2), List(3, 3))
def drop_list(r: List[Double], y:Int)={
  def drop(n: Int) = {
    if (n == 0) Nil
    else if (n <= 0) this
    else r.tail.drop(n-1)
  }
  drop(y)
}
drop_list(list_a, 2)

def take_list(r: List[Double], y: Int)={
  def take(n: Int) = {
    if(n == 0) Nil
    else if (n<=0) this
    else r.head::r.tail.take(n-1)
  }
  take(y)
}
take_list(list_b,1)
def column(xs: List[List[Int]], index: Int): List[Int] =
   xs map(row => row(index))
column(p1,1)
///val p1: Matrix5 = List(7 :: 8 :: 6 :: Nil, 9 :: 10 :: 1::Nil, 11 :: 12 :: 6:: Nil)
column(p1,0)  

def take1(r: List[Int],i: Int):Int={
      if(i==0) r.head
      else take1(r.tail,i-1)
}
def takeCol(d: List[List[Int]], i : Int) : List[Int]={
      if(d.isEmpty) Nil
      else take1(d.head,i):: takeCol(d.tail,i)
}

takeCol(p1,2)

def th(d: List[List[Int]], j:Int)={
  for(xs<-d)yield{
    take1(xs,j)
   
  }
    
}
th(p1,2)

def range_apply2(r: List[Int],range:Range)={
  def apply(range: Range) = {
    for(xs<-range)yield
       take1(r,xs)
  }
  apply(range)
}
def rangeMat(d: List[List[Int]],range:Range,index:Int)={
  val col = column(d,index)
  range_apply2(col,range)
}
val h = 0 to 33
val pa1: Matrix5 = List(7 :: 8 :: 6 :: Nil, 9 :: 10 :: 1::Nil, 11 :: 12 :: 6:: Nil,1 ::5 ::3::Nil)
rangeMat(pa1,t,1)
///val p1: Matrix5 = List(7 :: 8 :: 6 :: Nil, 9 :: 10 :: 1::Nil, 11 :: 12 :: 6:: Nil)


def rangeMats(d: List[Int],range:Range)={
  def apply(range: Range): List[Int] = {

    d.take(range.last).drop(range.head) 

  }
  apply(range)
}
val c1 = List(3, 7, 2, 9,8,12,5)
rangeMats(a1,h)

def rangeMatss(d: List[List[Int]],range:Range,index:Int)={
  val col = column(d,index)
  rangeMats(col,range)
}
rangeMatss(pa1,h,2)

val size = pa1.head.length 
size

val r1 = 0 until 10
r1
val r2 = r1.start until r1.end by r1.step + 1
//println(r2.length)
r2
r2.length
r1.start
r1.end







 



                       





